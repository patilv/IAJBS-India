h <- ggplot(faithful, aes(x = waiting))
h + geom_histogram(binwidth = 8, fill = "steelblue",
colour = "black")
h + geom_histogram(binwidth = 8, fill = "red",
colour = "white")
ggplot(faithful,aes(x=waiting,y=eruptions))+geom_point() +geom_smooth(method="lm")
ggplot(faithful,aes(x=waiting,y=eruptions))+geom_point() +geom_smooth()
?geom_smooth
ggplot(d2,aes(x=carat,y=price,color=color))+geom_point()
ggplot(d2,aes(x=carat,y=price,color=color))+geom_point()+geom_smooth(method="lm")
ggplot(d2,aes(x=carat,y=price))+geom_point(aes(color=color))+geom_smooth(method="lm")
head(d2)
ggplot(d2,aes(x=carat,y=price))+geom_point(aes(color=color))+geom_smooth(method="lm")
ggplot(d2,aes(x=carat,y=price))+geom_point(aes(color=color))+geom_smooth(method="lm")+ theme_bw()
gudatavizfa16::tallestbuildings
gudatavizfa16::opendataviz()
suppressPackageStartupMessages(library(knitr))
M1=gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=500, height=350))
suppressPackageStartupMessages(library(googleVis))
M1=gvisMotionChart(Fruits, "Fruit", "Year",
options=list(width=500, height=350))
M1
plot(M1)
devtools::install_github("patilv/gudatavizfa16",auth_token="7910f2edc06a588b38c0d6903078171fb246692f")
library(gudatavizfa16)
opendataviz()
op <- options(gvis.plot.tag='chart')
devtools::install_github("patilv/gudatavizfa16",auth_token="ad434b254f48fab14898a3ec6f8a01307af0eab7")
library(gudatavizfa16)
opendataviz()
devtools::install_github("patilv/gudatavizfa16",auth_token="ad434b254f48fab14898a3ec6f8a01307af0eab7")
library(gudatavizfa16)
opendataviz()
install.packages("survey")
library(survey)
data(api)
head(apisrs)
names(apisrs)
summary(apisrs)
srs_design=svydesign(id=~1, fpc=~fpc,data=apisrs)
srs_design
svytotal(~enroll,srs_design)
sd(apisrs$enroll)
svymean(~enroll,srs_design)
mean(apisrs$enroll)
sd(apisrs$enroll)
svytotal(~enroll,srs_design)
cumsum(apisrs$enroll)
sum(apisrs$enroll)
sum(apisrs$enroll)*apisrs$fpc/nrow(apisrs)
mean(apisrs$enroll)*apisrs$fpc/nrow(apisrs)
mean(apisrs$enroll)*apisrs$fpc/nrow(apisrs)
sum(apisrs$enroll)*apisrs$fpc/nrow(apisrs)
nofpc=svydesign(id=~1,weights=~pw,data=apisrs)
nofpc
svytotal(~enroll,nofpc)
svymean(~enroll,nofpc)
svymean(~stype,srs_design)
svytotal(~stype,srs_design)
table(apisrs$stype)
prop.table(apisrs$stype)
(apisrs$stype)*6194/200
table(apisrs$stype)*6194/200
svytotal(~stype,srs_design)
prop.table(table(apisrs$stype))
svymean(~stype,srs_design)
means=svymean(~api00+api99,srs_design)
means
svycontrast(means,c(api00=1,api99=-1))
devtools::install_github("patilv/gudatavizfa16",auth_token="ad434b254f48fab14898a3ec6f8a01307af0eab7")
library(gudatavizfa16)
opendataviz()
rmarkdown::shiny_prerendered_clean('C:/Users/Vivek/OneDrive/Documents/marketing research/FA16/FinalExam-Datasets.Rmd')
unlink('C:/Users/Vivek/OneDrive/Documents/marketing research/FA16/FinalExam-Datasets_cache', recursive = TRUE)
install.packages("sand")
sand::install_sand_packages()
shiny::runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
runApp('shinysparks')
unlink('~/GitHub/patilv.github.io/viZag-evals/index_cache', recursive = TRUE)
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr updateR(F, T, T, F, T, F, T)
if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr updateR(F, T, T, F, T, F, T)
if(!require("installr")) install.packages('installr')
library("installr")
updateR(F, T, T, F, T, F, T)
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
library(gudatavizfa17)
opendataviz()
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
library(gudatavizfa17)
opendataviz()
library(gudatavizfa17)
updatedataviz()
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
library(gudatavizfa17)
opendataviz()
getwd()
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
library(gudatavizfa17)
opendataviz()
install.packages("tidyverse")
library(ggplot2)
library(dplyr)
library(tidyr)
?mpg
head(mpg)
ggplot(mpg,aes(displ,hwy))+geom_point()+
facet_grid(class ~ .)
ggplot(mpg,aes(displ,hwy))+geom_point()+
facet_grid(class ~ .,scales="free")
ggplot(mpg,aes(displ,hwy))+geom_point()+
facet_grid(.~class,scales="free")
ggplot(mpg,aes(displ,hwy))+geom_point()+
facet_grid(.~class,scales="free",size=3)
ggplot(mpg,aes(displ,hwy))+geom_point(size=3)+
facet_grid(.~class,scales="free")
devtools::install_github("patilv/gudatavizfa17",auth_token="155ee13c1b35de529daaf5c0761584b57b9f5b6b")
library(gudatavizfa17)
opendataviz()
shiny::runApp('GUSERVERAPPS/viZag-evals')
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
set.seed(123)
datHist=data.frame(A=rpois(100, 20),
B=rpois(100, 5),
C=rpois(100, 50))
View(datHist)
head(datHist)
install.packages("googleVis")
library(googleVis)
Hist <- gvisHistogram(datHist, options=list(
legend="{ position: 'right', maxLines: 2 }",
colors="['#5C3292', '#1A8763', '#871B47']",
width=850, height=360))
plot(Hist)
Hist <- gvisHistogram(datHist)
plot(Hist)
print(Hist,file="hist.html")
getwd()
library(gudatavizfa17)
library(gudatavizfa17)
library(gudatavizfa16)
head(bcities)
bestcities=bcities
View(bestcities)
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
install.packages("ggplot2")
install.packages("ggplot2")
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
devtools::install_github("patilv/gudatavizfa17",auth_token="d183f669695ecf83cd0bf2875db10f9fe195acde")
?ggplot2::mpg
?mpg
?mtcars
summary(cars)
library(d3heatmap)
d3heatmap(mtcars,scale="column")
library(plotly)
ggplot(mtcars,aes(x=mpg,y=qsec))+geom_point()
mymtcarsplot=ggplot(mtcars,aes(x=mpg,y=qsec))+geom_point()
ggplotly(mtcarsplot)
ggplotly(mymtcarsplot)
install.packages("babynaes")
install.packages("babynames")
head(mtcars)
install.packages(c("blogdown", "geosphere", "glmmTMB", "glue", "lubridate", "openssl", "proxy", "quantreg", "R.utils", "rgdal", "rgeos", "rlang", "robustbase", "servr", "sf", "sjmisc", "tidyselect"))
thingstodo=read.table(text="
Attraction  lat lon  Population
Jepson  47.667268 -117.405114 45
Starbucks  47.669088 -117.396847  50
WSU 47.660960 -117.405697 250
EWU 47.661061 -117.404044 400",header=TRUE)
View(thingstodo)
install.packages("ggmap")
suppressMessages(library(ggmap))
geocode("502 E Boone Ave, Spokane, WA")
whatislatlon=function(mydata,addressindata){
locs=geocode(as.character(unique(mydata[,addressindata])))
locs$address=unique(mydata[,addressindata])
mydata$latitude=locs$lat[ match(mydata[,addressindata],locs$address)]
mydata$longitude=locs$lon[ match(mydata[,addressindata],locs$address)]
return(mydata)
}
Address=c("502 E Boone Ave, Spokane, WA, 99258","502 E Boone Ave, Spokane, WA, 99258")
mydummydata=data.frame(Address=Address)
mydummydata
mysmartdata=whatislatlon(mydummydata,"Address")
mysmartdata
location=c(-117.402209,47.665330)
map=get_map(location=location,maptype="roadmap",source="google",zoom=16)
ggmap(map)
map=get_map(location=location,maptype="roadmap",source="google",zoom=25)
ggmap(map)
map=get_map(location=location,maptype="roadmap",source="google",zoom=2)
ggmap(map)
map=get_map(location=location,maptype="roadmap",source="google",zoom=16)
ggmap(map)
spokanemap=ggmap(map)
print(spokanemap)
spokanemap=spokanemap+geom_point(data=thingstodo,
aes(lon,lat,color=Attraction),size=5)
print(spokanemap)
?get_map
map=get_map(location=location,maptype="roadmap",source="osm",zoom=16)
spokanemap=ggmap(map)
print(spokanemap)
map=get_map(location=location,maptype="roadmap",source="stamen",zoom=16)
spokanemap=ggmap(map)
print(spokanemap)
map=get_map(location=location,source="stamen",zoom=16)
spokanemap=ggmap(map)
print(spokanemap)
library(leaflet) #rstudio package
leaflet() %>% addTiles()
install.packages("huxtable")
install.packages('remotes')
remotes::install_github('hughjonesd/huxtable')
library(psych)
library(huxtable)
data(attitude)
att_corr <- corr.test(as.matrix(attitude))
att_hux <- as_hux(att_corr$r) %>%
# selects cells with p < 0.05:
set_background_color(where(att_corr$p < 0.05), 'yellow') %>%
# selects cells with p < 0.01:
set_background_color(where(att_corr$p < 0.01), 'orange') %>%
set_text_color(where(row(att_corr$r) == col(att_corr$r)), 'grey')
att_hux <- att_hux %>%
huxtable::add_rownames() %>%
huxtable::add_colnames() %>%
set_caption('Correlations in attitudes among 30 departments') %>%
set_bold(1, everywhere, TRUE) %>%
set_bold(everywhere, 1, TRUE) %>%
set_all_borders(1) %>%
set_number_format(2) %>%
set_position('left')
att_hux
library(dplyr)
library(psych)
library(huxtable)
library(dplyr)
data(attitude)
att_corr <- corr.test(as.matrix(attitude))
att_hux <- as_hux(att_corr$r) %>%
# selects cells with p < 0.05:
set_background_color(where(att_corr$p < 0.05), 'yellow') %>%
# selects cells with p < 0.01:
set_background_color(where(att_corr$p < 0.01), 'orange') %>%
set_text_color(where(row(att_corr$r) == col(att_corr$r)), 'grey')
att_hux <- att_hux %>%
huxtable::add_rownames() %>%
huxtable::add_colnames() %>%
set_caption('Correlations in attitudes among 30 departments') %>%
set_bold(1, everywhere, TRUE) %>%
set_bold(everywhere, 1, TRUE) %>%
set_all_borders(1) %>%
set_number_format(2) %>%
set_position('left')
att_hux
cor(mtcars)
cor(ggplot2::diamonds$carat,ggplot2::diamonds$price)
cor(ggplot2::diamonds$carat,ggplot2::diamonds$price)*cor(ggplot2::diamonds$carat,ggplot2::diamonds$price)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
### Section 2.1 Case Study: Predicting Fuel Economy
library(AppliedPredictiveModeling)
data(FuelEconomy)
## Format data for plotting against engine displacement
## Sort by engine displacement
cars2010 <- cars2010[order(cars2010$EngDispl),]
cars2011 <- cars2011[order(cars2011$EngDispl),]
## Combine data into one data frame
cars2010a <- cars2010
cars2010a$Year <- "2010 Model Year"
cars2011a <- cars2011
cars2011a$Year <- "2011 Model Year"
plotData <- rbind(cars2010a, cars2011a)
library(lattice)
xyplot(FE ~ EngDispl|Year, plotData,
xlab = "Engine Displacement",
ylab = "Fuel Efficiency (MPG)",
between = list(x = 1.2))
## Fit a single linear model and conduct 10-fold CV to estimate the error
library(caret)
set.seed(1)
lm1Fit <- train(FE ~ EngDispl,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm1Fit
## Fit a quadratic model too
## Create squared terms
cars2010$ED2 <- cars2010$EngDispl^2
cars2011$ED2 <- cars2011$EngDispl^2
set.seed(1)
lm2Fit <- train(FE ~ EngDispl + ED2,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm2Fit
## Finally a MARS model (via the earth package)
library(earth)
set.seed(1)
marsFit <- train(FE ~ EngDispl,
data = cars2010,
method = "earth",
tuneLength = 15,
trControl = trainControl(method= "cv"))
library(AppliedPredictiveModeling)
data(FuelEconomy)
## Format data for plotting against engine displacement
## Sort by engine displacement
cars2010 <- cars2010[order(cars2010$EngDispl),]
cars2011 <- cars2011[order(cars2011$EngDispl),]
## Combine data into one data frame
cars2010a <- cars2010
cars2010a$Year <- "2010 Model Year"
cars2011a <- cars2011
cars2011a$Year <- "2011 Model Year"
plotData <- rbind(cars2010a, cars2011a)
library(lattice)
xyplot(FE ~ EngDispl|Year, plotData,
xlab = "Engine Displacement",
ylab = "Fuel Efficiency (MPG)",
between = list(x = 1.2))
## Fit a single linear model and conduct 10-fold CV to estimate the error
library(caret)
set.seed(1)
lm1Fit <- train(FE ~ EngDispl,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm1Fit
xyplot(FE ~ EngDispl|Year, plotData,
xlab = "Engine Displacement",
ylab = "Fuel Efficiency (MPG)",
between = list(x = 1.2))
library(caret)
set.seed(1)
lm1Fit <- train(FE ~ EngDispl,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm1Fit
cars2010$ED2 <- cars2010$EngDispl^2
cars2011$ED2 <- cars2011$EngDispl^2
set.seed(1)
lm2Fit <- train(FE ~ EngDispl + ED2,
data = cars2010,
method = "lm",
trControl = trainControl(method= "cv"))
lm2Fit
library(earth)
set.seed(1)
marsFit <- train(FE ~ EngDispl,
data = cars2010,
method = "earth",
tuneLength = 15,
trControl = trainControl(method= "cv"))
marsFit
plot(marsFit)
## Predict the test set data
cars2011$lm1  <- predict(lm1Fit,  cars2011)
cars2011$lm2  <- predict(lm2Fit,  cars2011)
cars2011$mars <- predict(marsFit, cars2011)
## Get test set performance values via caret's postResample function
postResample(pred = cars2011$lm1,  obs = cars2011$FE)
postResample(pred = cars2011$lm2,  obs = cars2011$FE)
postResample(pred = cars2011$mars, obs = cars2011$FE)
str(mtcars)
summary(as.factor(mtcars$cyl))
summary(as.factor(mtcars$vs))
summary(as.factor(mtcars$am))
summary(as.factor(mtcars$gear))
summary(as.factor(mtcars$carb))
summary(as.factor(mtcars$mpg))
rattle()
install.packages("rattle")
rattle::rattle()
library(rattle)
rattle()
devtools::install_github("crsh/papaja")
devtools::install_github("rstudio/rticles")
plot(iris$Sepal.Length)
devtools::install_github("patilv/DeducerHansel")
library("rJava", lib.loc="~/R/RPackages")
install.packages(c("ape", "arm", "arules", "blogdown", "callr", "caret", "classInt", "CORElearn", "ddalpha", "emmeans", "ggridges", "ggthemes", "gstat", "htmlwidgets", "httpuv", "lme4", "lmtest", "lubridate", "maps", "Matrix", "network", "packrat", "prediction", "prodlim", "proxy", "quantmod", "Rcmdr", "RcmdrMisc", "readxl", "selectr", "survival", "tigris", "tinytex", "WDI", "XML"))
shiny::runApp('C:/Users/Vivek/Dropbox/MissionAssessessment/GUGRant/Analysis stuff/correlations')
runApp('C:/Users/Vivek/Dropbox/MissionAssessessment/GUGRant/Analysis stuff/correlations')
runApp('C:/Users/Vivek/Dropbox/MissionAssessessment/GUGRant/Analysis stuff/correlations')
install.packages("blogdown")
install.packages("blogdown")
blogdown::install_hugo(force=TRUE)
setwd("C:/Users/Vivek/Dropbox/Reverything")
setwd("~/GitHub/patilvsite")
?blogdown::new_site
blogdown::new_site(theme = "miguelsimoni/hugo-initio")
blogdown::new_site(theme = "miguelsimoni/hugo-initio")
setwd("~/GitHub/patilvsite")
blogdown::new_site(theme = "eueung/hugo-casper-two")
setwd("~/GitHub/patilvsite")
blogdown::new_site(theme = "themefisher/airspace-hugo")
setwd("~/GitHub/patilv-site")
blogdown::new_site(theme = "MarcusVirg/forty")
setwd("C:/Users/Vivek/Dropbox/Reverything")
setwd("~/GitHub/patilv-site/content/post")
files = list.files(
'content/', '[.](md|markdown)$', full.names = TRUE,
recursive = TRUE
)
for (f in files) {
blogdown:::process_file(f, function(x) {
# process x here and return the modified x
x
})
}
blogdown::new_post()
setwd("C:/Users/Vivek/Dropbox/Reverything")
setwd("~/GitHub/patilv-site/content/post")
setwd("~/GitHub/patilv-site")
blogdown::new_post("tmp")
blogdown::serve_site()
setwd("~/GitHub/patilvsite")
blogdown::serve_site()
setwd("~/GitHub/patilvsite")
blogdown::new_site(theme = "miguelsimoni/hugo-initio")
setwd("~/GitHub/patilvsite")
blogdown::new_site(theme = "miguelsimoni/hugo-initio")
blogdown::new_site(theme = "miguelsimoni/hugo-initio")
?hcl
hcl(h = 0, c = 35, l = 85, alpha, fixup = TRUE)
hcl(h = 0, c = 35, l = 85, alpha=.5, fixup = TRUE)
require(graphics)
# The Foley and Van Dam PhD Data.
csd <- matrix(c( 4,2,4,6, 4,3,1,4, 4,7,7,1,
0,7,3,2, 4,5,3,2, 5,4,2,2,
3,1,3,0, 4,4,6,7, 1,10,8,7,
1,5,3,2, 1,5,2,1, 4,1,4,3,
0,3,0,6, 2,1,5,5), nrow = 4)
csphd <- function(colors)
barplot(csd, col = colors, ylim = c(0,30),
names = 72:85, xlab = "Year", ylab = "Students",
legend = c("Winter", "Spring", "Summer", "Fall"),
main = "Computer Science PhD Graduates", las = 1)
# The Original (Metaphorical) Colors (Ouch!)
csphd(c("blue", "green", "yellow", "orange"))
# A Color Tetrad (Maximal Color Differences)
csphd(hcl(h = c(30, 120, 210, 300)))
# Same, but lighter and less colorful
# Turn off automatic correction to make sure
# that we have defined real colors.
csphd(hcl(h = c(30, 120, 210, 300),
c = 20, l = 90, fixup = FALSE))
# Analogous Colors
# Good for those with red/green color confusion
csphd(hcl(h = seq(60, 240, by = 60)))
# Metaphorical Colors
csphd(hcl(h = seq(210, 60, length = 4)))
# Cool Colors
csphd(hcl(h = seq(120, 0, length = 4) + 150))
# Warm Colors
csphd(hcl(h = seq(120, 0, length = 4) - 30))
# Single Color
hist(stats::rnorm(1000), col = hcl(240))
## Exploring the hcl() color space {in its mapping to R's sRGB colors}:
demo(hclColors)
demo(hclcolors)
demo(hclColors)
hcl(100,5,100)
# A Color Tetrad (Maximal Color Differences)
csphd(hcl(h = c(30, 120, 210, 300)))
barplot(csd, col = colors, ylim = c(0,30),
names = 72:85, xlab = "Year", ylab = "Students",
legend = c("Winter", "Spring", "Summer", "Fall"),
main = "Computer Science PhD Graduates", las = 1)
getwd()
install.packages("bookdown")
bookdown:::serve_book()
install.packages("dplyr")
install.packages("dplyr")
bookdown:::serve_book()
bookdown:::serve_book()
install.packages("webshot")
install.packages("webshot")
bookdown:::serve_book()
install.packages("car")
bookdown:::serve_book()
install.packages("servr")
bookdown:::serve_book()
1+1
3*5
plot(iris$Sepal.Length)
1+1
plot(iris$Sepal.Length)
plot(iris$Sepal.Width)
1+1
plot(iris$Sepal.Length)
install.packages("bibliometrix")
devtools::install_github("muschellij2/rscopus")
install.packages("rScopus")
yes
install.packages("rscopus")
?knitr::include_graphics
setwd("G:/My Drive/PvtRes/IAJBS-CJBE/IAJBS-India")
